package Apr14th_1;

public class Practice01 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		// #1 연산후 대입, 당연히 사칙연산의 순서
		//
		int k27_ii; // k27_ii라는 정수형 변수를 선언
		k27_ii = 1 + 2; // k27_ii변수에 1 + 2 를 계산하여 대입
		System.out.printf("#1-1 : %d\n", k27_ii); // k27_ii 를 출력 정수형이므로 %d 사용
		k27_ii = 1 + 2 * 3; // k27_ii 변수에 1 + 2 * 3 을 계산하여 대입
		System.out.printf("#1-2 : %d\n\n\n", k27_ii); // k27_ii 를 출력 정수형이므로 %d 사용

		// #2 누적하기, 합구하기
		//
		int k27_sum; // k27_sum 이라는 정수형 변수를 선언

		k27_sum = 0; // k27_sum 에 0을 대입하여 변수 초기화

		// 1부터 100까지 더해보자
		for (int k27_i = 1; k27_i < 101; k27_i++) { // for문 k27_i는 1부터 시작해서 하나씩 늘어나고 100까지
			k27_sum = k27_sum + k27_i; // k27_sum 에 앞에있던 k27_sum을 k27_i를 더하여 대입
		}
		System.out.printf("#2-1 : %d\n", k27_sum); // 1~100까지 합인 k27_sum을 출력 정수형이므로 %d 사용
		System.out.printf("#2-2 : %d\n", k27_sum / 100); // 평균을 구하기 위해 총합/100
		
		int[] k27_v = { 1, 2, 3, 4, 5 }; // 정수형 배열 선언
		int k27_vSum; // 위 배열의 합을 넣을 변수 선언

		k27_vSum = 0; // 혹시모르니 0을 대입하여 초기화
		for (int k27_i = 0; k27_i < 5; k27_i++) { // 배열의 첫번째값(0)부터 다섯번째값(4)까지 진행
			k27_vSum = k27_vSum + k27_v[k27_i]; // 총합을 구할 변수에 계속해서 합을 더해주기
		}
		System.out.printf("#2-3 : %d\n\n\n", k27_vSum); // 1 + 2 + 3 + 4 + 5 = 15 가 출력

		// #3 정수형 변수의 나눗셈은 정수범위에서 버림처리
		//
		k27_ii = 1000 / 3; // 333.333333..이 나오지 않는다
		System.out.printf("#3-1 : %d\n", k27_ii); // 몫인 333이 출력 소숫점 이하는 버림
		k27_ii = 1000 % 3; // 나머지 연산자 %로 3으로 나누웠을 때의 나머지를 구함
		System.out.printf("#3-2 : %d\n", k27_ii); // 나머지 1이 출력

		// 나머지 연산자의 응용
		for (int k27_i = 0; k27_i < 20; k27_i++) { // 0~ 19 까지 for문 돌리기
			System.out.printf("#3-3 : %d ", k27_i); // 0 ~ 19 까지 출력
			if (((k27_i + 1) % 5) == 0) { // 다섯번의 k27_i의 출력이 있을 때
				System.out.printf("\n"); // 줄바꿈을 해주겠다
			}
		}
		System.out.printf("\n\n"); // 가독성을 위한 줄바꿈

		// #4 원하는 자릿수 반올림, 버림처리
		//
		k27_ii = 12345; // 변수 k27_ii에 12345 대입
		int k27_j = (k27_ii / 10) * 10; // 정수형 k27_j선언과 10의 자리에서 버림 계산
		System.out.printf("#4-1 : %d\n", k27_j); // 결과값 : 12340

		k27_ii = 12345; // 변수 k27_ii에 12345 대입
		k27_j = ((k27_ii + 5) / 10) * 10; // 10의 자리에서 반올림을 위해 + 5
		System.out.printf("#4-2 : %d\n", k27_j); // 결과값 : 12350

		k27_ii = 12344; // 반올림이 잘 되는지 확인을 위해 12344 대입
		k27_j = ((k27_ii + 5) / 10) * 10; // 반올림 과정
		System.out.printf("#4-2 : %d\n", k27_j); // 결과값 : 12340

		// #4-X 100원 이하 버림 올림, 1000원이하 버림 반올림을 구현
		//
		k27_ii = 12345; // 변수 k27_ii에 12345 대입
		k27_j = ((k27_ii) / 100) * 100; // 100자리에서 버림 계산
		System.out.printf("#4-3 : %d\n", k27_j); // 결과값 : 12300

		k27_ii = 12345; // 변수 k27_ii에 12345 대입
		k27_j = ((k27_ii + 100) / 100) * 100; // 100의 자리에서 올림 계산
		System.out.printf("#4-3 : %d\n", k27_j); // 결과값 : 12400

		k27_ii = 12345;// 변수 k27_ii에 12345 대입
		k27_j = ((k27_ii) / 1000) * 1000; // 1000의 자리에서 버림 계산
		System.out.printf("#4-4 : %d\n", k27_j); // 결과값 : 12000

		k27_ii = 12645;// 변수 k27_ii에 12645 대입
		k27_j = ((k27_ii + 500) / 1000) * 1000; // 1000의 자리에서 반올림 계산을 위해 + 500
		System.out.printf("#4-4 : %d\n\n\n", k27_j); // 결과값 : 13000

		// #5 소수점 이하에서는 어떻게 될까?
		//
		int k27_MyVal = 14 / 5; // 정수형 k27_MyVal 선언과 14/5를 계산한 값을 대입
		// 계산하면 2.8이다. 소수점 이하 버리면 2, 반올림하면 3
		System.out.printf("#5-1 : %d\n", k27_MyVal); // 결과값 : 2 이유는 k27_MyVal이 정수형임

		double k27_MyValF; // 실수형 변수 k27_MyValF 선언

		k27_MyValF = 14 / 5; // 14 / 5 실수형 변수니까 2.8 이 출력되야함
		System.out.printf("#5-2 : %f\n", k27_MyValF); // 결과값 : 2 이유는 계산식에 실수형이 없기 때문

		k27_MyValF = 14.0 / 5; // 14.0 / 5 를 사용하여 실수형으로 계산 시도
		System.out.printf("#5-3 : %f\n", k27_MyValF); // 결과값 : 2.800000 드디어 실수형으로 출력!

		k27_MyValF = (14.0) / 5 + 0.5; // 실수형 계산에서 반올림 시도
		System.out.printf("#5-4 : %f\n", k27_MyValF); // 결과값 : 3.300000

		k27_MyVal = (int) ((14.0) / 5 + 0.5); // 반올림 후 정수형으로 변환 실수->정수는 버림
		System.out.printf("#5-5 : %d\n", k27_MyVal); // 결과값 3

	}

}
